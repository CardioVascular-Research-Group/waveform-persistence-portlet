/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package edu.jhu.cvrg.waveform.main.dbpersistence.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import edu.jhu.cvrg.waveform.main.dbpersistence.model.FilesInfo;
import edu.jhu.cvrg.waveform.main.dbpersistence.model.FilesInfoModel;
import edu.jhu.cvrg.waveform.main.dbpersistence.model.FilesInfoSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the FilesInfo service. Represents a row in the &quot;Database_FilesInfo&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link edu.jhu.cvrg.waveform.main.dbpersistence.model.FilesInfoModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FilesInfoImpl}.
 * </p>
 *
 * @author bbenite1
 * @see FilesInfoImpl
 * @see edu.jhu.cvrg.waveform.main.dbpersistence.model.FilesInfo
 * @see edu.jhu.cvrg.waveform.main.dbpersistence.model.FilesInfoModel
 * @generated
 */
@JSON(strict = true)
public class FilesInfoModelImpl extends BaseModelImpl<FilesInfo>
	implements FilesInfoModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a files info model instance should use the {@link edu.jhu.cvrg.waveform.main.dbpersistence.model.FilesInfo} interface instead.
	 */
	public static final String TABLE_NAME = "Database_FilesInfo";
	public static final Object[][] TABLE_COLUMNS = {
			{ "FileID", Types.BIGINT },
			{ "DocumentRecordID", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table Database_FilesInfo (FileID LONG not null primary key,DocumentRecordID LONG)";
	public static final String TABLE_SQL_DROP = "drop table Database_FilesInfo";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.edu.jhu.cvrg.waveform.main.dbpersistence.model.FilesInfo"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.edu.jhu.cvrg.waveform.main.dbpersistence.model.FilesInfo"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.edu.jhu.cvrg.waveform.main.dbpersistence.model.FilesInfo"),
			true);
	public static long DOCUMENTRECORDID_COLUMN_BITMASK = 1L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static FilesInfo toModel(FilesInfoSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		FilesInfo model = new FilesInfoImpl();

		model.setFileID(soapModel.getFileID());
		model.setDocumentRecordID(soapModel.getDocumentRecordID());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<FilesInfo> toModels(FilesInfoSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<FilesInfo> models = new ArrayList<FilesInfo>(soapModels.length);

		for (FilesInfoSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.edu.jhu.cvrg.waveform.main.dbpersistence.model.FilesInfo"));

	public FilesInfoModelImpl() {
	}

	public long getPrimaryKey() {
		return _FileID;
	}

	public void setPrimaryKey(long primaryKey) {
		setFileID(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_FileID);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return FilesInfo.class;
	}

	public String getModelClassName() {
		return FilesInfo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("FileID", getFileID());
		attributes.put("DocumentRecordID", getDocumentRecordID());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long FileID = (Long)attributes.get("FileID");

		if (FileID != null) {
			setFileID(FileID);
		}

		Long DocumentRecordID = (Long)attributes.get("DocumentRecordID");

		if (DocumentRecordID != null) {
			setDocumentRecordID(DocumentRecordID);
		}
	}

	@JSON
	public long getFileID() {
		return _FileID;
	}

	public void setFileID(long FileID) {
		_FileID = FileID;
	}

	@JSON
	public long getDocumentRecordID() {
		return _DocumentRecordID;
	}

	public void setDocumentRecordID(long DocumentRecordID) {
		_columnBitmask |= DOCUMENTRECORDID_COLUMN_BITMASK;

		if (!_setOriginalDocumentRecordID) {
			_setOriginalDocumentRecordID = true;

			_originalDocumentRecordID = _DocumentRecordID;
		}

		_DocumentRecordID = DocumentRecordID;
	}

	public long getOriginalDocumentRecordID() {
		return _originalDocumentRecordID;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			FilesInfo.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FilesInfo toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (FilesInfo)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		FilesInfoImpl filesInfoImpl = new FilesInfoImpl();

		filesInfoImpl.setFileID(getFileID());
		filesInfoImpl.setDocumentRecordID(getDocumentRecordID());

		filesInfoImpl.resetOriginalValues();

		return filesInfoImpl;
	}

	public int compareTo(FilesInfo filesInfo) {
		long primaryKey = filesInfo.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		FilesInfo filesInfo = null;

		try {
			filesInfo = (FilesInfo)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = filesInfo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		FilesInfoModelImpl filesInfoModelImpl = this;

		filesInfoModelImpl._originalDocumentRecordID = filesInfoModelImpl._DocumentRecordID;

		filesInfoModelImpl._setOriginalDocumentRecordID = false;

		filesInfoModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<FilesInfo> toCacheModel() {
		FilesInfoCacheModel filesInfoCacheModel = new FilesInfoCacheModel();

		filesInfoCacheModel.FileID = getFileID();

		filesInfoCacheModel.DocumentRecordID = getDocumentRecordID();

		return filesInfoCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{FileID=");
		sb.append(getFileID());
		sb.append(", DocumentRecordID=");
		sb.append(getDocumentRecordID());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("edu.jhu.cvrg.waveform.main.dbpersistence.model.FilesInfo");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>FileID</column-name><column-value><![CDATA[");
		sb.append(getFileID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>DocumentRecordID</column-name><column-value><![CDATA[");
		sb.append(getDocumentRecordID());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = FilesInfo.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			FilesInfo.class
		};
	private long _FileID;
	private long _DocumentRecordID;
	private long _originalDocumentRecordID;
	private boolean _setOriginalDocumentRecordID;
	private long _columnBitmask;
	private FilesInfo _escapedModelProxy;
}