/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package edu.jhu.cvrg.waveform.main.dbpersistence.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import edu.jhu.cvrg.waveform.main.dbpersistence.model.AnnotationInfo;
import edu.jhu.cvrg.waveform.main.dbpersistence.model.AnnotationInfoModel;
import edu.jhu.cvrg.waveform.main.dbpersistence.model.AnnotationInfoSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the AnnotationInfo service. Represents a row in the &quot;Database_AnnotationInfo&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link edu.jhu.cvrg.waveform.main.dbpersistence.model.AnnotationInfoModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AnnotationInfoImpl}.
 * </p>
 *
 * @author bbenite1
 * @see AnnotationInfoImpl
 * @see edu.jhu.cvrg.waveform.main.dbpersistence.model.AnnotationInfo
 * @see edu.jhu.cvrg.waveform.main.dbpersistence.model.AnnotationInfoModel
 * @generated
 */
@JSON(strict = true)
public class AnnotationInfoModelImpl extends BaseModelImpl<AnnotationInfo>
	implements AnnotationInfoModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a annotation info model instance should use the {@link edu.jhu.cvrg.waveform.main.dbpersistence.model.AnnotationInfo} interface instead.
	 */
	public static final String TABLE_NAME = "Database_AnnotationInfo";
	public static final Object[][] TABLE_COLUMNS = {
			{ "AnnotationID", Types.VARCHAR },
			{ "CreatedBy", Types.VARCHAR },
			{ "AnnotationType", Types.VARCHAR },
			{ "Name", Types.VARCHAR },
			{ "BioportalReference", Types.VARCHAR },
			{ "Lead", Types.VARCHAR },
			{ "StartingCoordinateID", Types.VARCHAR },
			{ "EndingCoordinateID", Types.VARCHAR },
			{ "UnitOfMeasurement", Types.VARCHAR },
			{ "Description", Types.VARCHAR },
			{ "Value", Types.VARCHAR },
			{ "RecordID", Types.VARCHAR },
			{ "Timestamp", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table Database_AnnotationInfo (AnnotationID VARCHAR(75) not null primary key,CreatedBy VARCHAR(75) null,AnnotationType VARCHAR(75) null,Name VARCHAR(75) null,BioportalReference VARCHAR(75) null,Lead VARCHAR(75) null,StartingCoordinateID VARCHAR(75) null,EndingCoordinateID VARCHAR(75) null,UnitOfMeasurement VARCHAR(75) null,Description VARCHAR(75) null,Value VARCHAR(75) null,RecordID VARCHAR(75) null,Timestamp DATE null)";
	public static final String TABLE_SQL_DROP = "drop table Database_AnnotationInfo";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.edu.jhu.cvrg.waveform.main.dbpersistence.model.AnnotationInfo"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.edu.jhu.cvrg.waveform.main.dbpersistence.model.AnnotationInfo"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.edu.jhu.cvrg.waveform.main.dbpersistence.model.AnnotationInfo"),
			true);
	public static long ANNOTATIONTYPE_COLUMN_BITMASK = 1L;
	public static long LEAD_COLUMN_BITMASK = 2L;
	public static long NAME_COLUMN_BITMASK = 4L;
	public static long RECORDID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static AnnotationInfo toModel(AnnotationInfoSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		AnnotationInfo model = new AnnotationInfoImpl();

		model.setAnnotationID(soapModel.getAnnotationID());
		model.setCreatedBy(soapModel.getCreatedBy());
		model.setAnnotationType(soapModel.getAnnotationType());
		model.setName(soapModel.getName());
		model.setBioportalReference(soapModel.getBioportalReference());
		model.setLead(soapModel.getLead());
		model.setStartingCoordinateID(soapModel.getStartingCoordinateID());
		model.setEndingCoordinateID(soapModel.getEndingCoordinateID());
		model.setUnitOfMeasurement(soapModel.getUnitOfMeasurement());
		model.setDescription(soapModel.getDescription());
		model.setValue(soapModel.getValue());
		model.setRecordID(soapModel.getRecordID());
		model.setTimestamp(soapModel.getTimestamp());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<AnnotationInfo> toModels(AnnotationInfoSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<AnnotationInfo> models = new ArrayList<AnnotationInfo>(soapModels.length);

		for (AnnotationInfoSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.edu.jhu.cvrg.waveform.main.dbpersistence.model.AnnotationInfo"));

	public AnnotationInfoModelImpl() {
	}

	public String getPrimaryKey() {
		return _AnnotationID;
	}

	public void setPrimaryKey(String primaryKey) {
		setAnnotationID(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return _AnnotationID;
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	public Class<?> getModelClass() {
		return AnnotationInfo.class;
	}

	public String getModelClassName() {
		return AnnotationInfo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("AnnotationID", getAnnotationID());
		attributes.put("CreatedBy", getCreatedBy());
		attributes.put("AnnotationType", getAnnotationType());
		attributes.put("Name", getName());
		attributes.put("BioportalReference", getBioportalReference());
		attributes.put("Lead", getLead());
		attributes.put("StartingCoordinateID", getStartingCoordinateID());
		attributes.put("EndingCoordinateID", getEndingCoordinateID());
		attributes.put("UnitOfMeasurement", getUnitOfMeasurement());
		attributes.put("Description", getDescription());
		attributes.put("Value", getValue());
		attributes.put("RecordID", getRecordID());
		attributes.put("Timestamp", getTimestamp());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String AnnotationID = (String)attributes.get("AnnotationID");

		if (AnnotationID != null) {
			setAnnotationID(AnnotationID);
		}

		String CreatedBy = (String)attributes.get("CreatedBy");

		if (CreatedBy != null) {
			setCreatedBy(CreatedBy);
		}

		String AnnotationType = (String)attributes.get("AnnotationType");

		if (AnnotationType != null) {
			setAnnotationType(AnnotationType);
		}

		String Name = (String)attributes.get("Name");

		if (Name != null) {
			setName(Name);
		}

		String BioportalReference = (String)attributes.get("BioportalReference");

		if (BioportalReference != null) {
			setBioportalReference(BioportalReference);
		}

		String Lead = (String)attributes.get("Lead");

		if (Lead != null) {
			setLead(Lead);
		}

		String StartingCoordinateID = (String)attributes.get(
				"StartingCoordinateID");

		if (StartingCoordinateID != null) {
			setStartingCoordinateID(StartingCoordinateID);
		}

		String EndingCoordinateID = (String)attributes.get("EndingCoordinateID");

		if (EndingCoordinateID != null) {
			setEndingCoordinateID(EndingCoordinateID);
		}

		String UnitOfMeasurement = (String)attributes.get("UnitOfMeasurement");

		if (UnitOfMeasurement != null) {
			setUnitOfMeasurement(UnitOfMeasurement);
		}

		String Description = (String)attributes.get("Description");

		if (Description != null) {
			setDescription(Description);
		}

		String Value = (String)attributes.get("Value");

		if (Value != null) {
			setValue(Value);
		}

		String RecordID = (String)attributes.get("RecordID");

		if (RecordID != null) {
			setRecordID(RecordID);
		}

		Date Timestamp = (Date)attributes.get("Timestamp");

		if (Timestamp != null) {
			setTimestamp(Timestamp);
		}
	}

	@JSON
	public String getAnnotationID() {
		if (_AnnotationID == null) {
			return StringPool.BLANK;
		}
		else {
			return _AnnotationID;
		}
	}

	public void setAnnotationID(String AnnotationID) {
		_AnnotationID = AnnotationID;
	}

	@JSON
	public String getCreatedBy() {
		if (_CreatedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _CreatedBy;
		}
	}

	public void setCreatedBy(String CreatedBy) {
		_CreatedBy = CreatedBy;
	}

	@JSON
	public String getAnnotationType() {
		if (_AnnotationType == null) {
			return StringPool.BLANK;
		}
		else {
			return _AnnotationType;
		}
	}

	public void setAnnotationType(String AnnotationType) {
		_columnBitmask |= ANNOTATIONTYPE_COLUMN_BITMASK;

		if (_originalAnnotationType == null) {
			_originalAnnotationType = _AnnotationType;
		}

		_AnnotationType = AnnotationType;
	}

	public String getOriginalAnnotationType() {
		return GetterUtil.getString(_originalAnnotationType);
	}

	@JSON
	public String getName() {
		if (_Name == null) {
			return StringPool.BLANK;
		}
		else {
			return _Name;
		}
	}

	public void setName(String Name) {
		_columnBitmask |= NAME_COLUMN_BITMASK;

		if (_originalName == null) {
			_originalName = _Name;
		}

		_Name = Name;
	}

	public String getOriginalName() {
		return GetterUtil.getString(_originalName);
	}

	@JSON
	public String getBioportalReference() {
		if (_BioportalReference == null) {
			return StringPool.BLANK;
		}
		else {
			return _BioportalReference;
		}
	}

	public void setBioportalReference(String BioportalReference) {
		_BioportalReference = BioportalReference;
	}

	@JSON
	public String getLead() {
		if (_Lead == null) {
			return StringPool.BLANK;
		}
		else {
			return _Lead;
		}
	}

	public void setLead(String Lead) {
		_columnBitmask |= LEAD_COLUMN_BITMASK;

		if (_originalLead == null) {
			_originalLead = _Lead;
		}

		_Lead = Lead;
	}

	public String getOriginalLead() {
		return GetterUtil.getString(_originalLead);
	}

	@JSON
	public String getStartingCoordinateID() {
		if (_StartingCoordinateID == null) {
			return StringPool.BLANK;
		}
		else {
			return _StartingCoordinateID;
		}
	}

	public void setStartingCoordinateID(String StartingCoordinateID) {
		_StartingCoordinateID = StartingCoordinateID;
	}

	@JSON
	public String getEndingCoordinateID() {
		if (_EndingCoordinateID == null) {
			return StringPool.BLANK;
		}
		else {
			return _EndingCoordinateID;
		}
	}

	public void setEndingCoordinateID(String EndingCoordinateID) {
		_EndingCoordinateID = EndingCoordinateID;
	}

	@JSON
	public String getUnitOfMeasurement() {
		if (_UnitOfMeasurement == null) {
			return StringPool.BLANK;
		}
		else {
			return _UnitOfMeasurement;
		}
	}

	public void setUnitOfMeasurement(String UnitOfMeasurement) {
		_UnitOfMeasurement = UnitOfMeasurement;
	}

	@JSON
	public String getDescription() {
		if (_Description == null) {
			return StringPool.BLANK;
		}
		else {
			return _Description;
		}
	}

	public void setDescription(String Description) {
		_Description = Description;
	}

	@JSON
	public String getValue() {
		if (_Value == null) {
			return StringPool.BLANK;
		}
		else {
			return _Value;
		}
	}

	public void setValue(String Value) {
		_Value = Value;
	}

	@JSON
	public String getRecordID() {
		if (_RecordID == null) {
			return StringPool.BLANK;
		}
		else {
			return _RecordID;
		}
	}

	public void setRecordID(String RecordID) {
		_columnBitmask |= RECORDID_COLUMN_BITMASK;

		if (_originalRecordID == null) {
			_originalRecordID = _RecordID;
		}

		_RecordID = RecordID;
	}

	public String getOriginalRecordID() {
		return GetterUtil.getString(_originalRecordID);
	}

	@JSON
	public Date getTimestamp() {
		return _Timestamp;
	}

	public void setTimestamp(Date Timestamp) {
		_Timestamp = Timestamp;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public AnnotationInfo toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (AnnotationInfo)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		AnnotationInfoImpl annotationInfoImpl = new AnnotationInfoImpl();

		annotationInfoImpl.setAnnotationID(getAnnotationID());
		annotationInfoImpl.setCreatedBy(getCreatedBy());
		annotationInfoImpl.setAnnotationType(getAnnotationType());
		annotationInfoImpl.setName(getName());
		annotationInfoImpl.setBioportalReference(getBioportalReference());
		annotationInfoImpl.setLead(getLead());
		annotationInfoImpl.setStartingCoordinateID(getStartingCoordinateID());
		annotationInfoImpl.setEndingCoordinateID(getEndingCoordinateID());
		annotationInfoImpl.setUnitOfMeasurement(getUnitOfMeasurement());
		annotationInfoImpl.setDescription(getDescription());
		annotationInfoImpl.setValue(getValue());
		annotationInfoImpl.setRecordID(getRecordID());
		annotationInfoImpl.setTimestamp(getTimestamp());

		annotationInfoImpl.resetOriginalValues();

		return annotationInfoImpl;
	}

	public int compareTo(AnnotationInfo annotationInfo) {
		String primaryKey = annotationInfo.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		AnnotationInfo annotationInfo = null;

		try {
			annotationInfo = (AnnotationInfo)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		String primaryKey = annotationInfo.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
		AnnotationInfoModelImpl annotationInfoModelImpl = this;

		annotationInfoModelImpl._originalAnnotationType = annotationInfoModelImpl._AnnotationType;

		annotationInfoModelImpl._originalName = annotationInfoModelImpl._Name;

		annotationInfoModelImpl._originalLead = annotationInfoModelImpl._Lead;

		annotationInfoModelImpl._originalRecordID = annotationInfoModelImpl._RecordID;

		annotationInfoModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<AnnotationInfo> toCacheModel() {
		AnnotationInfoCacheModel annotationInfoCacheModel = new AnnotationInfoCacheModel();

		annotationInfoCacheModel.AnnotationID = getAnnotationID();

		String AnnotationID = annotationInfoCacheModel.AnnotationID;

		if ((AnnotationID != null) && (AnnotationID.length() == 0)) {
			annotationInfoCacheModel.AnnotationID = null;
		}

		annotationInfoCacheModel.CreatedBy = getCreatedBy();

		String CreatedBy = annotationInfoCacheModel.CreatedBy;

		if ((CreatedBy != null) && (CreatedBy.length() == 0)) {
			annotationInfoCacheModel.CreatedBy = null;
		}

		annotationInfoCacheModel.AnnotationType = getAnnotationType();

		String AnnotationType = annotationInfoCacheModel.AnnotationType;

		if ((AnnotationType != null) && (AnnotationType.length() == 0)) {
			annotationInfoCacheModel.AnnotationType = null;
		}

		annotationInfoCacheModel.Name = getName();

		String Name = annotationInfoCacheModel.Name;

		if ((Name != null) && (Name.length() == 0)) {
			annotationInfoCacheModel.Name = null;
		}

		annotationInfoCacheModel.BioportalReference = getBioportalReference();

		String BioportalReference = annotationInfoCacheModel.BioportalReference;

		if ((BioportalReference != null) && (BioportalReference.length() == 0)) {
			annotationInfoCacheModel.BioportalReference = null;
		}

		annotationInfoCacheModel.Lead = getLead();

		String Lead = annotationInfoCacheModel.Lead;

		if ((Lead != null) && (Lead.length() == 0)) {
			annotationInfoCacheModel.Lead = null;
		}

		annotationInfoCacheModel.StartingCoordinateID = getStartingCoordinateID();

		String StartingCoordinateID = annotationInfoCacheModel.StartingCoordinateID;

		if ((StartingCoordinateID != null) &&
				(StartingCoordinateID.length() == 0)) {
			annotationInfoCacheModel.StartingCoordinateID = null;
		}

		annotationInfoCacheModel.EndingCoordinateID = getEndingCoordinateID();

		String EndingCoordinateID = annotationInfoCacheModel.EndingCoordinateID;

		if ((EndingCoordinateID != null) && (EndingCoordinateID.length() == 0)) {
			annotationInfoCacheModel.EndingCoordinateID = null;
		}

		annotationInfoCacheModel.UnitOfMeasurement = getUnitOfMeasurement();

		String UnitOfMeasurement = annotationInfoCacheModel.UnitOfMeasurement;

		if ((UnitOfMeasurement != null) && (UnitOfMeasurement.length() == 0)) {
			annotationInfoCacheModel.UnitOfMeasurement = null;
		}

		annotationInfoCacheModel.Description = getDescription();

		String Description = annotationInfoCacheModel.Description;

		if ((Description != null) && (Description.length() == 0)) {
			annotationInfoCacheModel.Description = null;
		}

		annotationInfoCacheModel.Value = getValue();

		String Value = annotationInfoCacheModel.Value;

		if ((Value != null) && (Value.length() == 0)) {
			annotationInfoCacheModel.Value = null;
		}

		annotationInfoCacheModel.RecordID = getRecordID();

		String RecordID = annotationInfoCacheModel.RecordID;

		if ((RecordID != null) && (RecordID.length() == 0)) {
			annotationInfoCacheModel.RecordID = null;
		}

		Date Timestamp = getTimestamp();

		if (Timestamp != null) {
			annotationInfoCacheModel.Timestamp = Timestamp.getTime();
		}
		else {
			annotationInfoCacheModel.Timestamp = Long.MIN_VALUE;
		}

		return annotationInfoCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(27);

		sb.append("{AnnotationID=");
		sb.append(getAnnotationID());
		sb.append(", CreatedBy=");
		sb.append(getCreatedBy());
		sb.append(", AnnotationType=");
		sb.append(getAnnotationType());
		sb.append(", Name=");
		sb.append(getName());
		sb.append(", BioportalReference=");
		sb.append(getBioportalReference());
		sb.append(", Lead=");
		sb.append(getLead());
		sb.append(", StartingCoordinateID=");
		sb.append(getStartingCoordinateID());
		sb.append(", EndingCoordinateID=");
		sb.append(getEndingCoordinateID());
		sb.append(", UnitOfMeasurement=");
		sb.append(getUnitOfMeasurement());
		sb.append(", Description=");
		sb.append(getDescription());
		sb.append(", Value=");
		sb.append(getValue());
		sb.append(", RecordID=");
		sb.append(getRecordID());
		sb.append(", Timestamp=");
		sb.append(getTimestamp());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(43);

		sb.append("<model><model-name>");
		sb.append(
			"edu.jhu.cvrg.waveform.main.dbpersistence.model.AnnotationInfo");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>AnnotationID</column-name><column-value><![CDATA[");
		sb.append(getAnnotationID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>CreatedBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>AnnotationType</column-name><column-value><![CDATA[");
		sb.append(getAnnotationType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>BioportalReference</column-name><column-value><![CDATA[");
		sb.append(getBioportalReference());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Lead</column-name><column-value><![CDATA[");
		sb.append(getLead());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>StartingCoordinateID</column-name><column-value><![CDATA[");
		sb.append(getStartingCoordinateID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>EndingCoordinateID</column-name><column-value><![CDATA[");
		sb.append(getEndingCoordinateID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>UnitOfMeasurement</column-name><column-value><![CDATA[");
		sb.append(getUnitOfMeasurement());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Value</column-name><column-value><![CDATA[");
		sb.append(getValue());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>RecordID</column-name><column-value><![CDATA[");
		sb.append(getRecordID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Timestamp</column-name><column-value><![CDATA[");
		sb.append(getTimestamp());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = AnnotationInfo.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			AnnotationInfo.class
		};
	private String _AnnotationID;
	private String _CreatedBy;
	private String _AnnotationType;
	private String _originalAnnotationType;
	private String _Name;
	private String _originalName;
	private String _BioportalReference;
	private String _Lead;
	private String _originalLead;
	private String _StartingCoordinateID;
	private String _EndingCoordinateID;
	private String _UnitOfMeasurement;
	private String _Description;
	private String _Value;
	private String _RecordID;
	private String _originalRecordID;
	private Date _Timestamp;
	private long _columnBitmask;
	private AnnotationInfo _escapedModelProxy;
}